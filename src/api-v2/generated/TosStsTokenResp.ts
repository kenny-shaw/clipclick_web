/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface ITosStsTokenResp {
    region: string;
    endpoint: string;
    accessKeyId: string;
    accessKeySecret: string;
    stsToken: string;
    bucket: string;
}
export interface ITosStsTokenRespArgs {
    region: string;
    endpoint: string;
    accessKeyId: string;
    accessKeySecret: string;
    stsToken: string;
    bucket: string;
}
export const TosStsTokenRespCodec: thrift.IStructCodec<ITosStsTokenRespArgs, ITosStsTokenResp> = {
    encode(args: ITosStsTokenRespArgs, output: thrift.TProtocol): void {
        const obj: any = {
            region: args.region,
            endpoint: args.endpoint,
            accessKeyId: args.accessKeyId,
            accessKeySecret: args.accessKeySecret,
            stsToken: args.stsToken,
            bucket: args.bucket
        };
        output.writeStructBegin("TosStsTokenResp");
        if (obj.region != null) {
            output.writeFieldBegin("region", thrift.TType.STRING, 1);
            output.writeString(obj.region);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[region] is unset!");
        }
        if (obj.endpoint != null) {
            output.writeFieldBegin("endpoint", thrift.TType.STRING, 2);
            output.writeString(obj.endpoint);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[endpoint] is unset!");
        }
        if (obj.accessKeyId != null) {
            output.writeFieldBegin("accessKeyId", thrift.TType.STRING, 3);
            output.writeString(obj.accessKeyId);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[accessKeyId] is unset!");
        }
        if (obj.accessKeySecret != null) {
            output.writeFieldBegin("accessKeySecret", thrift.TType.STRING, 4);
            output.writeString(obj.accessKeySecret);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[accessKeySecret] is unset!");
        }
        if (obj.stsToken != null) {
            output.writeFieldBegin("stsToken", thrift.TType.STRING, 5);
            output.writeString(obj.stsToken);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[stsToken] is unset!");
        }
        if (obj.bucket != null) {
            output.writeFieldBegin("bucket", thrift.TType.STRING, 6);
            output.writeString(obj.bucket);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[bucket] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ITosStsTokenResp {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.region = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.endpoint = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.accessKeyId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.accessKeySecret = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.stsToken = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.bucket = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.region !== undefined && _args.endpoint !== undefined && _args.accessKeyId !== undefined && _args.accessKeySecret !== undefined && _args.stsToken !== undefined && _args.bucket !== undefined) {
            return {
                region: _args.region,
                endpoint: _args.endpoint,
                accessKeyId: _args.accessKeyId,
                accessKeySecret: _args.accessKeySecret,
                stsToken: _args.stsToken,
                bucket: _args.bucket
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TosStsTokenResp from input");
        }
    }
};
export class TosStsTokenResp extends thrift.StructLike implements ITosStsTokenResp {
    public region: string;
    public endpoint: string;
    public accessKeyId: string;
    public accessKeySecret: string;
    public stsToken: string;
    public bucket: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ITosStsTokenRespArgs) {
        super();
        if (args.region != null) {
            const value_7: string = args.region;
            this.region = value_7;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[region] is unset!");
        }
        if (args.endpoint != null) {
            const value_8: string = args.endpoint;
            this.endpoint = value_8;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[endpoint] is unset!");
        }
        if (args.accessKeyId != null) {
            const value_9: string = args.accessKeyId;
            this.accessKeyId = value_9;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[accessKeyId] is unset!");
        }
        if (args.accessKeySecret != null) {
            const value_10: string = args.accessKeySecret;
            this.accessKeySecret = value_10;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[accessKeySecret] is unset!");
        }
        if (args.stsToken != null) {
            const value_11: string = args.stsToken;
            this.stsToken = value_11;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[stsToken] is unset!");
        }
        if (args.bucket != null) {
            const value_12: string = args.bucket;
            this.bucket = value_12;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[bucket] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): TosStsTokenResp {
        return new TosStsTokenResp(TosStsTokenRespCodec.decode(input));
    }
    public static write(args: ITosStsTokenRespArgs, output: thrift.TProtocol): void {
        return TosStsTokenRespCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return TosStsTokenRespCodec.encode(this, output);
    }
}
