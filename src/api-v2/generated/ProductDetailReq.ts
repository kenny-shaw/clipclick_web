/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IProductDetailReq {
    productId: thrift.Int64;
}
export interface IProductDetailReqArgs {
    productId: number | string | thrift.Int64;
}
export const ProductDetailReqCodec: thrift.IStructCodec<IProductDetailReqArgs, IProductDetailReq> = {
    encode(args: IProductDetailReqArgs, output: thrift.TProtocol): void {
        const obj: any = {
            productId: (typeof args.productId === "number" ? new thrift.Int64(args.productId) : typeof args.productId === "string" ? thrift.Int64.fromDecimalString(args.productId) : args.productId)
        };
        output.writeStructBegin("ProductDetailReq");
        if (obj.productId != null) {
            output.writeFieldBegin("productId", thrift.TType.I64, 1);
            output.writeI64((typeof obj.productId === "number" ? new thrift.Int64(obj.productId) : typeof obj.productId === "string" ? thrift.Int64.fromDecimalString(obj.productId) : obj.productId));
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[productId] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IProductDetailReq {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I64) {
                        const value_1: thrift.Int64 = input.readI64();
                        _args.productId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.productId !== undefined) {
            return {
                productId: _args.productId
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ProductDetailReq from input");
        }
    }
};
export class ProductDetailReq extends thrift.StructLike implements IProductDetailReq {
    public productId: thrift.Int64;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {
        productId: {
            'api.path': "productId"
        }
    };
    constructor(args: IProductDetailReqArgs) {
        super();
        if (args.productId != null) {
            const value_2: thrift.Int64 = (typeof args.productId === "number" ? new thrift.Int64(args.productId) : typeof args.productId === "string" ? thrift.Int64.fromDecimalString(args.productId) : args.productId);
            this.productId = value_2;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[productId] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): ProductDetailReq {
        return new ProductDetailReq(ProductDetailReqCodec.decode(input));
    }
    public static write(args: IProductDetailReqArgs, output: thrift.TProtocol): void {
        return ProductDetailReqCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ProductDetailReqCodec.encode(this, output);
    }
}
