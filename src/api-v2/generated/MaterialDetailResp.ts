/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Material from "./Material";
export interface IMaterialDetailResp {
    material: Material.IMaterial;
}
export interface IMaterialDetailRespArgs {
    material: Material.IMaterialArgs;
}
export const MaterialDetailRespCodec: thrift.IStructCodec<IMaterialDetailRespArgs, IMaterialDetailResp> = {
    encode(args: IMaterialDetailRespArgs, output: thrift.TProtocol): void {
        const obj: any = {
            material: args.material
        };
        output.writeStructBegin("MaterialDetailResp");
        if (obj.material != null) {
            output.writeFieldBegin("material", thrift.TType.STRUCT, 1);
            Material.MaterialCodec.encode(obj.material, output);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[material] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IMaterialDetailResp {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_1: Material.IMaterial = Material.MaterialCodec.decode(input);
                        _args.material = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.material !== undefined) {
            return {
                material: _args.material
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read MaterialDetailResp from input");
        }
    }
};
export class MaterialDetailResp extends thrift.StructLike implements IMaterialDetailResp {
    public material: Material.IMaterial;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IMaterialDetailRespArgs) {
        super();
        if (args.material != null) {
            const value_2: Material.IMaterial = new Material.Material(args.material);
            this.material = value_2;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[material] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): MaterialDetailResp {
        return new MaterialDetailResp(MaterialDetailRespCodec.decode(input));
    }
    public static write(args: IMaterialDetailRespArgs, output: thrift.TProtocol): void {
        return MaterialDetailRespCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return MaterialDetailRespCodec.encode(this, output);
    }
}
