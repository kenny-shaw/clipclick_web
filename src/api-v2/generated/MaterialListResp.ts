/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Material from "./Material";
export interface IMaterialListResp {
    materials: Array<Material.IMaterial>;
    total: number;
}
export interface IMaterialListRespArgs {
    materials: Array<Material.IMaterialArgs>;
    total: number;
}
export const MaterialListRespCodec: thrift.IStructCodec<IMaterialListRespArgs, IMaterialListResp> = {
    encode(args: IMaterialListRespArgs, output: thrift.TProtocol): void {
        const obj: any = {
            materials: args.materials,
            total: args.total
        };
        output.writeStructBegin("MaterialListResp");
        if (obj.materials != null) {
            output.writeFieldBegin("materials", thrift.TType.LIST, 1);
            output.writeListBegin(thrift.TType.STRUCT, obj.materials.length);
            obj.materials.forEach((value_1: Material.IMaterialArgs): void => {
                Material.MaterialCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[materials] is unset!");
        }
        if (obj.total != null) {
            output.writeFieldBegin("total", thrift.TType.I32, 2);
            output.writeI32(obj.total);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[total] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IMaterialListResp {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.LIST) {
                        const value_2: Array<Material.IMaterial> = new Array<Material.IMaterial>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_3: Material.IMaterial = Material.MaterialCodec.decode(input);
                            value_2.push(value_3);
                        }
                        input.readListEnd();
                        _args.materials = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_4: number = input.readI32();
                        _args.total = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.materials !== undefined && _args.total !== undefined) {
            return {
                materials: _args.materials,
                total: _args.total
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read MaterialListResp from input");
        }
    }
};
export class MaterialListResp extends thrift.StructLike implements IMaterialListResp {
    public materials: Array<Material.IMaterial>;
    public total: number;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IMaterialListRespArgs) {
        super();
        if (args.materials != null) {
            const value_5: Array<Material.IMaterial> = new Array<Material.IMaterial>();
            args.materials.forEach((value_7: Material.IMaterialArgs): void => {
                const value_8: Material.IMaterial = new Material.Material(value_7);
                value_5.push(value_8);
            });
            this.materials = value_5;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[materials] is unset!");
        }
        if (args.total != null) {
            const value_6: number = args.total;
            this.total = value_6;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[total] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): MaterialListResp {
        return new MaterialListResp(MaterialListRespCodec.decode(input));
    }
    public static write(args: IMaterialListRespArgs, output: thrift.TProtocol): void {
        return MaterialListRespCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return MaterialListRespCodec.encode(this, output);
    }
}
