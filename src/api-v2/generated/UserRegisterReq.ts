/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IUserRegisterReq {
    username: string;
    password: string;
    email?: string;
    phone?: string;
}
export interface IUserRegisterReqArgs {
    username: string;
    password: string;
    email?: string;
    phone?: string;
}
export const UserRegisterReqCodec: thrift.IStructCodec<IUserRegisterReqArgs, IUserRegisterReq> = {
    encode(args: IUserRegisterReqArgs, output: thrift.TProtocol): void {
        const obj: any = {
            username: args.username,
            password: args.password,
            email: args.email,
            phone: args.phone
        };
        output.writeStructBegin("UserRegisterReq");
        if (obj.username != null) {
            output.writeFieldBegin("username", thrift.TType.STRING, 1);
            output.writeString(obj.username);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[username] is unset!");
        }
        if (obj.password != null) {
            output.writeFieldBegin("password", thrift.TType.STRING, 2);
            output.writeString(obj.password);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[password] is unset!");
        }
        if (obj.email != null) {
            output.writeFieldBegin("email", thrift.TType.STRING, 3);
            output.writeString(obj.email);
            output.writeFieldEnd();
        }
        if (obj.phone != null) {
            output.writeFieldBegin("phone", thrift.TType.STRING, 4);
            output.writeString(obj.phone);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IUserRegisterReq {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.username = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.password = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.email = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.phone = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.username !== undefined && _args.password !== undefined) {
            return {
                username: _args.username,
                password: _args.password,
                email: _args.email,
                phone: _args.phone
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read UserRegisterReq from input");
        }
    }
};
export class UserRegisterReq extends thrift.StructLike implements IUserRegisterReq {
    public username: string;
    public password: string;
    public email?: string;
    public phone?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IUserRegisterReqArgs) {
        super();
        if (args.username != null) {
            const value_5: string = args.username;
            this.username = value_5;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[username] is unset!");
        }
        if (args.password != null) {
            const value_6: string = args.password;
            this.password = value_6;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[password] is unset!");
        }
        if (args.email != null) {
            const value_7: string = args.email;
            this.email = value_7;
        }
        if (args.phone != null) {
            const value_8: string = args.phone;
            this.phone = value_8;
        }
    }
    public static read(input: thrift.TProtocol): UserRegisterReq {
        return new UserRegisterReq(UserRegisterReqCodec.decode(input));
    }
    public static write(args: IUserRegisterReqArgs, output: thrift.TProtocol): void {
        return UserRegisterReqCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return UserRegisterReqCodec.encode(this, output);
    }
}
