/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IMaterialListReq {
    pageNo: number;
    pageSize: number;
    folderId: thrift.Int64;
}
export interface IMaterialListReqArgs {
    pageNo: number;
    pageSize: number;
    folderId: number | string | thrift.Int64;
}
export const MaterialListReqCodec: thrift.IStructCodec<IMaterialListReqArgs, IMaterialListReq> = {
    encode(args: IMaterialListReqArgs, output: thrift.TProtocol): void {
        const obj: any = {
            pageNo: args.pageNo,
            pageSize: args.pageSize,
            folderId: (typeof args.folderId === "number" ? new thrift.Int64(args.folderId) : typeof args.folderId === "string" ? thrift.Int64.fromDecimalString(args.folderId) : args.folderId)
        };
        output.writeStructBegin("MaterialListReq");
        if (obj.pageNo != null) {
            output.writeFieldBegin("pageNo", thrift.TType.I32, 1);
            output.writeI32(obj.pageNo);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[pageNo] is unset!");
        }
        if (obj.pageSize != null) {
            output.writeFieldBegin("pageSize", thrift.TType.I32, 2);
            output.writeI32(obj.pageSize);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[pageSize] is unset!");
        }
        if (obj.folderId != null) {
            output.writeFieldBegin("folderId", thrift.TType.I64, 3);
            output.writeI64((typeof obj.folderId === "number" ? new thrift.Int64(obj.folderId) : typeof obj.folderId === "string" ? thrift.Int64.fromDecimalString(obj.folderId) : obj.folderId));
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[folderId] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IMaterialListReq {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_1: number = input.readI32();
                        _args.pageNo = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_2: number = input.readI32();
                        _args.pageSize = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I64) {
                        const value_3: thrift.Int64 = input.readI64();
                        _args.folderId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.pageNo !== undefined && _args.pageSize !== undefined && _args.folderId !== undefined) {
            return {
                pageNo: _args.pageNo,
                pageSize: _args.pageSize,
                folderId: _args.folderId
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read MaterialListReq from input");
        }
    }
};
export class MaterialListReq extends thrift.StructLike implements IMaterialListReq {
    public pageNo: number;
    public pageSize: number;
    public folderId: thrift.Int64;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IMaterialListReqArgs) {
        super();
        if (args.pageNo != null) {
            const value_4: number = args.pageNo;
            this.pageNo = value_4;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[pageNo] is unset!");
        }
        if (args.pageSize != null) {
            const value_5: number = args.pageSize;
            this.pageSize = value_5;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[pageSize] is unset!");
        }
        if (args.folderId != null) {
            const value_6: thrift.Int64 = (typeof args.folderId === "number" ? new thrift.Int64(args.folderId) : typeof args.folderId === "string" ? thrift.Int64.fromDecimalString(args.folderId) : args.folderId);
            this.folderId = value_6;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[folderId] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): MaterialListReq {
        return new MaterialListReq(MaterialListReqCodec.decode(input));
    }
    public static write(args: IMaterialListReqArgs, output: thrift.TProtocol): void {
        return MaterialListReqCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return MaterialListReqCodec.encode(this, output);
    }
}
