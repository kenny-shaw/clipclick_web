/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IMaterialUpdateReq {
    materialId: thrift.Int64;
    folderId?: thrift.Int64;
    name?: string;
    attributes?: string;
    category?: thrift.Int64;
    modalData?: string;
    platformSource?: string;
    industry?: thrift.Int64;
    url?: string;
    relatedInfo?: string;
    metaInfo?: string;
    isApproved?: number;
    md5?: string;
    isPublic?: number;
    understandingStatus?: number;
}
export interface IMaterialUpdateReqArgs {
    materialId: number | string | thrift.Int64;
    folderId?: number | string | thrift.Int64;
    name?: string;
    attributes?: string;
    category?: number | string | thrift.Int64;
    modalData?: string;
    platformSource?: string;
    industry?: number | string | thrift.Int64;
    url?: string;
    relatedInfo?: string;
    metaInfo?: string;
    isApproved?: number;
    md5?: string;
    isPublic?: number;
    understandingStatus?: number;
}
export const MaterialUpdateReqCodec: thrift.IStructCodec<IMaterialUpdateReqArgs, IMaterialUpdateReq> = {
    encode(args: IMaterialUpdateReqArgs, output: thrift.TProtocol): void {
        const obj: any = {
            materialId: (typeof args.materialId === "number" ? new thrift.Int64(args.materialId) : typeof args.materialId === "string" ? thrift.Int64.fromDecimalString(args.materialId) : args.materialId),
            folderId: (typeof args.folderId === "number" ? new thrift.Int64(args.folderId) : typeof args.folderId === "string" ? thrift.Int64.fromDecimalString(args.folderId) : args.folderId),
            name: args.name,
            attributes: args.attributes,
            category: (typeof args.category === "number" ? new thrift.Int64(args.category) : typeof args.category === "string" ? thrift.Int64.fromDecimalString(args.category) : args.category),
            modalData: args.modalData,
            platformSource: args.platformSource,
            industry: (typeof args.industry === "number" ? new thrift.Int64(args.industry) : typeof args.industry === "string" ? thrift.Int64.fromDecimalString(args.industry) : args.industry),
            url: args.url,
            relatedInfo: args.relatedInfo,
            metaInfo: args.metaInfo,
            isApproved: args.isApproved,
            md5: args.md5,
            isPublic: args.isPublic,
            understandingStatus: args.understandingStatus
        };
        output.writeStructBegin("MaterialUpdateReq");
        if (obj.materialId != null) {
            output.writeFieldBegin("materialId", thrift.TType.I64, 1);
            output.writeI64((typeof obj.materialId === "number" ? new thrift.Int64(obj.materialId) : typeof obj.materialId === "string" ? thrift.Int64.fromDecimalString(obj.materialId) : obj.materialId));
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[materialId] is unset!");
        }
        if (obj.folderId != null) {
            output.writeFieldBegin("folderId", thrift.TType.I64, 2);
            output.writeI64((typeof obj.folderId === "number" ? new thrift.Int64(obj.folderId) : typeof obj.folderId === "string" ? thrift.Int64.fromDecimalString(obj.folderId) : obj.folderId));
            output.writeFieldEnd();
        }
        if (obj.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 3);
            output.writeString(obj.name);
            output.writeFieldEnd();
        }
        if (obj.attributes != null) {
            output.writeFieldBegin("attributes", thrift.TType.STRING, 4);
            output.writeString(obj.attributes);
            output.writeFieldEnd();
        }
        if (obj.category != null) {
            output.writeFieldBegin("category", thrift.TType.I64, 5);
            output.writeI64((typeof obj.category === "number" ? new thrift.Int64(obj.category) : typeof obj.category === "string" ? thrift.Int64.fromDecimalString(obj.category) : obj.category));
            output.writeFieldEnd();
        }
        if (obj.modalData != null) {
            output.writeFieldBegin("modalData", thrift.TType.STRING, 6);
            output.writeString(obj.modalData);
            output.writeFieldEnd();
        }
        if (obj.platformSource != null) {
            output.writeFieldBegin("platformSource", thrift.TType.STRING, 7);
            output.writeString(obj.platformSource);
            output.writeFieldEnd();
        }
        if (obj.industry != null) {
            output.writeFieldBegin("industry", thrift.TType.I64, 8);
            output.writeI64((typeof obj.industry === "number" ? new thrift.Int64(obj.industry) : typeof obj.industry === "string" ? thrift.Int64.fromDecimalString(obj.industry) : obj.industry));
            output.writeFieldEnd();
        }
        if (obj.url != null) {
            output.writeFieldBegin("url", thrift.TType.STRING, 9);
            output.writeString(obj.url);
            output.writeFieldEnd();
        }
        if (obj.relatedInfo != null) {
            output.writeFieldBegin("relatedInfo", thrift.TType.STRING, 10);
            output.writeString(obj.relatedInfo);
            output.writeFieldEnd();
        }
        if (obj.metaInfo != null) {
            output.writeFieldBegin("metaInfo", thrift.TType.STRING, 11);
            output.writeString(obj.metaInfo);
            output.writeFieldEnd();
        }
        if (obj.isApproved != null) {
            output.writeFieldBegin("isApproved", thrift.TType.I32, 12);
            output.writeI32(obj.isApproved);
            output.writeFieldEnd();
        }
        if (obj.md5 != null) {
            output.writeFieldBegin("md5", thrift.TType.STRING, 13);
            output.writeString(obj.md5);
            output.writeFieldEnd();
        }
        if (obj.isPublic != null) {
            output.writeFieldBegin("isPublic", thrift.TType.I32, 14);
            output.writeI32(obj.isPublic);
            output.writeFieldEnd();
        }
        if (obj.understandingStatus != null) {
            output.writeFieldBegin("understandingStatus", thrift.TType.I32, 15);
            output.writeI32(obj.understandingStatus);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IMaterialUpdateReq {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I64) {
                        const value_1: thrift.Int64 = input.readI64();
                        _args.materialId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I64) {
                        const value_2: thrift.Int64 = input.readI64();
                        _args.folderId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.name = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.attributes = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.I64) {
                        const value_5: thrift.Int64 = input.readI64();
                        _args.category = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.modalData = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRING) {
                        const value_7: string = input.readString();
                        _args.platformSource = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.I64) {
                        const value_8: thrift.Int64 = input.readI64();
                        _args.industry = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.url = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRING) {
                        const value_10: string = input.readString();
                        _args.relatedInfo = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.STRING) {
                        const value_11: string = input.readString();
                        _args.metaInfo = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.I32) {
                        const value_12: number = input.readI32();
                        _args.isApproved = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.STRING) {
                        const value_13: string = input.readString();
                        _args.md5 = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.I32) {
                        const value_14: number = input.readI32();
                        _args.isPublic = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.TType.I32) {
                        const value_15: number = input.readI32();
                        _args.understandingStatus = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.materialId !== undefined) {
            return {
                materialId: _args.materialId,
                folderId: _args.folderId,
                name: _args.name,
                attributes: _args.attributes,
                category: _args.category,
                modalData: _args.modalData,
                platformSource: _args.platformSource,
                industry: _args.industry,
                url: _args.url,
                relatedInfo: _args.relatedInfo,
                metaInfo: _args.metaInfo,
                isApproved: _args.isApproved,
                md5: _args.md5,
                isPublic: _args.isPublic,
                understandingStatus: _args.understandingStatus
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read MaterialUpdateReq from input");
        }
    }
};
export class MaterialUpdateReq extends thrift.StructLike implements IMaterialUpdateReq {
    public materialId: thrift.Int64;
    public folderId?: thrift.Int64;
    public name?: string;
    public attributes?: string;
    public category?: thrift.Int64;
    public modalData?: string;
    public platformSource?: string;
    public industry?: thrift.Int64;
    public url?: string;
    public relatedInfo?: string;
    public metaInfo?: string;
    public isApproved?: number;
    public md5?: string;
    public isPublic?: number;
    public understandingStatus?: number;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {
        materialId: {
            'api.path': "materialId"
        }
    };
    constructor(args: IMaterialUpdateReqArgs) {
        super();
        if (args.materialId != null) {
            const value_16: thrift.Int64 = (typeof args.materialId === "number" ? new thrift.Int64(args.materialId) : typeof args.materialId === "string" ? thrift.Int64.fromDecimalString(args.materialId) : args.materialId);
            this.materialId = value_16;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[materialId] is unset!");
        }
        if (args.folderId != null) {
            const value_17: thrift.Int64 = (typeof args.folderId === "number" ? new thrift.Int64(args.folderId) : typeof args.folderId === "string" ? thrift.Int64.fromDecimalString(args.folderId) : args.folderId);
            this.folderId = value_17;
        }
        if (args.name != null) {
            const value_18: string = args.name;
            this.name = value_18;
        }
        if (args.attributes != null) {
            const value_19: string = args.attributes;
            this.attributes = value_19;
        }
        if (args.category != null) {
            const value_20: thrift.Int64 = (typeof args.category === "number" ? new thrift.Int64(args.category) : typeof args.category === "string" ? thrift.Int64.fromDecimalString(args.category) : args.category);
            this.category = value_20;
        }
        if (args.modalData != null) {
            const value_21: string = args.modalData;
            this.modalData = value_21;
        }
        if (args.platformSource != null) {
            const value_22: string = args.platformSource;
            this.platformSource = value_22;
        }
        if (args.industry != null) {
            const value_23: thrift.Int64 = (typeof args.industry === "number" ? new thrift.Int64(args.industry) : typeof args.industry === "string" ? thrift.Int64.fromDecimalString(args.industry) : args.industry);
            this.industry = value_23;
        }
        if (args.url != null) {
            const value_24: string = args.url;
            this.url = value_24;
        }
        if (args.relatedInfo != null) {
            const value_25: string = args.relatedInfo;
            this.relatedInfo = value_25;
        }
        if (args.metaInfo != null) {
            const value_26: string = args.metaInfo;
            this.metaInfo = value_26;
        }
        if (args.isApproved != null) {
            const value_27: number = args.isApproved;
            this.isApproved = value_27;
        }
        if (args.md5 != null) {
            const value_28: string = args.md5;
            this.md5 = value_28;
        }
        if (args.isPublic != null) {
            const value_29: number = args.isPublic;
            this.isPublic = value_29;
        }
        if (args.understandingStatus != null) {
            const value_30: number = args.understandingStatus;
            this.understandingStatus = value_30;
        }
    }
    public static read(input: thrift.TProtocol): MaterialUpdateReq {
        return new MaterialUpdateReq(MaterialUpdateReqCodec.decode(input));
    }
    public static write(args: IMaterialUpdateReqArgs, output: thrift.TProtocol): void {
        return MaterialUpdateReqCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return MaterialUpdateReqCodec.encode(this, output);
    }
}
