/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IUserDeleteReq {
}
export interface IUserDeleteReqArgs {
}
export const UserDeleteReqCodec: thrift.IStructCodec<IUserDeleteReqArgs, IUserDeleteReq> = {
    encode(args: IUserDeleteReqArgs, output: thrift.TProtocol): void {
        output.writeStructBegin("UserDeleteReq");
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IUserDeleteReq {
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {};
    }
};
export class UserDeleteReq extends thrift.StructLike implements IUserDeleteReq {
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IUserDeleteReqArgs = {}) {
        super();
    }
    public static read(input: thrift.TProtocol): UserDeleteReq {
        return new UserDeleteReq(UserDeleteReqCodec.decode(input));
    }
    public static write(args: IUserDeleteReqArgs, output: thrift.TProtocol): void {
        return UserDeleteReqCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return UserDeleteReqCodec.encode(this, output);
    }
}
