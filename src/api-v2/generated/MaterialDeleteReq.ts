/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IMaterialDeleteReq {
    materialId: thrift.Int64;
}
export interface IMaterialDeleteReqArgs {
    materialId: number | string | thrift.Int64;
}
export const MaterialDeleteReqCodec: thrift.IStructCodec<IMaterialDeleteReqArgs, IMaterialDeleteReq> = {
    encode(args: IMaterialDeleteReqArgs, output: thrift.TProtocol): void {
        const obj: any = {
            materialId: (typeof args.materialId === "number" ? new thrift.Int64(args.materialId) : typeof args.materialId === "string" ? thrift.Int64.fromDecimalString(args.materialId) : args.materialId)
        };
        output.writeStructBegin("MaterialDeleteReq");
        if (obj.materialId != null) {
            output.writeFieldBegin("materialId", thrift.TType.I64, 1);
            output.writeI64((typeof obj.materialId === "number" ? new thrift.Int64(obj.materialId) : typeof obj.materialId === "string" ? thrift.Int64.fromDecimalString(obj.materialId) : obj.materialId));
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[materialId] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IMaterialDeleteReq {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I64) {
                        const value_1: thrift.Int64 = input.readI64();
                        _args.materialId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.materialId !== undefined) {
            return {
                materialId: _args.materialId
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read MaterialDeleteReq from input");
        }
    }
};
export class MaterialDeleteReq extends thrift.StructLike implements IMaterialDeleteReq {
    public materialId: thrift.Int64;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IMaterialDeleteReqArgs) {
        super();
        if (args.materialId != null) {
            const value_2: thrift.Int64 = (typeof args.materialId === "number" ? new thrift.Int64(args.materialId) : typeof args.materialId === "string" ? thrift.Int64.fromDecimalString(args.materialId) : args.materialId);
            this.materialId = value_2;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[materialId] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): MaterialDeleteReq {
        return new MaterialDeleteReq(MaterialDeleteReqCodec.decode(input));
    }
    public static write(args: IMaterialDeleteReqArgs, output: thrift.TProtocol): void {
        return MaterialDeleteReqCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return MaterialDeleteReqCodec.encode(this, output);
    }
}
