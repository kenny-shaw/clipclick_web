/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IUser {
    id: thrift.Int64;
    username: string;
    email?: string;
    phone?: string;
    createdAt: string;
    updatedAt: string;
    status: number;
}
export interface IUserArgs {
    id: number | string | thrift.Int64;
    username: string;
    email?: string;
    phone?: string;
    createdAt: string;
    updatedAt: string;
    status: number;
}
export const UserCodec: thrift.IStructCodec<IUserArgs, IUser> = {
    encode(args: IUserArgs, output: thrift.TProtocol): void {
        const obj: any = {
            id: (typeof args.id === "number" ? new thrift.Int64(args.id) : typeof args.id === "string" ? thrift.Int64.fromDecimalString(args.id) : args.id),
            username: args.username,
            email: args.email,
            phone: args.phone,
            createdAt: args.createdAt,
            updatedAt: args.updatedAt,
            status: args.status
        };
        output.writeStructBegin("User");
        if (obj.id != null) {
            output.writeFieldBegin("id", thrift.TType.I64, 1);
            output.writeI64((typeof obj.id === "number" ? new thrift.Int64(obj.id) : typeof obj.id === "string" ? thrift.Int64.fromDecimalString(obj.id) : obj.id));
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (obj.username != null) {
            output.writeFieldBegin("username", thrift.TType.STRING, 2);
            output.writeString(obj.username);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[username] is unset!");
        }
        if (obj.email != null) {
            output.writeFieldBegin("email", thrift.TType.STRING, 3);
            output.writeString(obj.email);
            output.writeFieldEnd();
        }
        if (obj.phone != null) {
            output.writeFieldBegin("phone", thrift.TType.STRING, 4);
            output.writeString(obj.phone);
            output.writeFieldEnd();
        }
        if (obj.createdAt != null) {
            output.writeFieldBegin("createdAt", thrift.TType.STRING, 5);
            output.writeString(obj.createdAt);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[createdAt] is unset!");
        }
        if (obj.updatedAt != null) {
            output.writeFieldBegin("updatedAt", thrift.TType.STRING, 6);
            output.writeString(obj.updatedAt);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[updatedAt] is unset!");
        }
        if (obj.status != null) {
            output.writeFieldBegin("status", thrift.TType.I32, 7);
            output.writeI32(obj.status);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[status] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IUser {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I64) {
                        const value_1: thrift.Int64 = input.readI64();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.username = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.email = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.phone = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.createdAt = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.updatedAt = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.I32) {
                        const value_7: number = input.readI32();
                        _args.status = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.id !== undefined && _args.username !== undefined && _args.createdAt !== undefined && _args.updatedAt !== undefined && _args.status !== undefined) {
            return {
                id: _args.id,
                username: _args.username,
                email: _args.email,
                phone: _args.phone,
                createdAt: _args.createdAt,
                updatedAt: _args.updatedAt,
                status: _args.status
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read User from input");
        }
    }
};
export class User extends thrift.StructLike implements IUser {
    public id: thrift.Int64;
    public username: string;
    public email?: string;
    public phone?: string;
    public createdAt: string;
    public updatedAt: string;
    public status: number;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IUserArgs) {
        super();
        if (args.id != null) {
            const value_8: thrift.Int64 = (typeof args.id === "number" ? new thrift.Int64(args.id) : typeof args.id === "string" ? thrift.Int64.fromDecimalString(args.id) : args.id);
            this.id = value_8;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (args.username != null) {
            const value_9: string = args.username;
            this.username = value_9;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[username] is unset!");
        }
        if (args.email != null) {
            const value_10: string = args.email;
            this.email = value_10;
        }
        if (args.phone != null) {
            const value_11: string = args.phone;
            this.phone = value_11;
        }
        if (args.createdAt != null) {
            const value_12: string = args.createdAt;
            this.createdAt = value_12;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[createdAt] is unset!");
        }
        if (args.updatedAt != null) {
            const value_13: string = args.updatedAt;
            this.updatedAt = value_13;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[updatedAt] is unset!");
        }
        if (args.status != null) {
            const value_14: number = args.status;
            this.status = value_14;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[status] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): User {
        return new User(UserCodec.decode(input));
    }
    public static write(args: IUserArgs, output: thrift.TProtocol): void {
        return UserCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return UserCodec.encode(this, output);
    }
}
