/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Folder from "./Folder";
export interface IFolderListResp {
    folders: Array<Folder.IFolder>;
    total: number;
}
export interface IFolderListRespArgs {
    folders: Array<Folder.IFolderArgs>;
    total: number;
}
export const FolderListRespCodec: thrift.IStructCodec<IFolderListRespArgs, IFolderListResp> = {
    encode(args: IFolderListRespArgs, output: thrift.TProtocol): void {
        const obj: any = {
            folders: args.folders,
            total: args.total
        };
        output.writeStructBegin("FolderListResp");
        if (obj.folders != null) {
            output.writeFieldBegin("folders", thrift.TType.LIST, 1);
            output.writeListBegin(thrift.TType.STRUCT, obj.folders.length);
            obj.folders.forEach((value_1: Folder.IFolderArgs): void => {
                Folder.FolderCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[folders] is unset!");
        }
        if (obj.total != null) {
            output.writeFieldBegin("total", thrift.TType.I32, 2);
            output.writeI32(obj.total);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[total] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IFolderListResp {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.LIST) {
                        const value_2: Array<Folder.IFolder> = new Array<Folder.IFolder>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_3: Folder.IFolder = Folder.FolderCodec.decode(input);
                            value_2.push(value_3);
                        }
                        input.readListEnd();
                        _args.folders = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_4: number = input.readI32();
                        _args.total = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.folders !== undefined && _args.total !== undefined) {
            return {
                folders: _args.folders,
                total: _args.total
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read FolderListResp from input");
        }
    }
};
export class FolderListResp extends thrift.StructLike implements IFolderListResp {
    public folders: Array<Folder.IFolder>;
    public total: number;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IFolderListRespArgs) {
        super();
        if (args.folders != null) {
            const value_5: Array<Folder.IFolder> = new Array<Folder.IFolder>();
            args.folders.forEach((value_7: Folder.IFolderArgs): void => {
                const value_8: Folder.IFolder = new Folder.Folder(value_7);
                value_5.push(value_8);
            });
            this.folders = value_5;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[folders] is unset!");
        }
        if (args.total != null) {
            const value_6: number = args.total;
            this.total = value_6;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[total] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): FolderListResp {
        return new FolderListResp(FolderListRespCodec.decode(input));
    }
    public static write(args: IFolderListRespArgs, output: thrift.TProtocol): void {
        return FolderListRespCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return FolderListRespCodec.encode(this, output);
    }
}
