/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IFolderCreateReq {
    name: string;
    parentId?: thrift.Int64;
    tosKey?: string;
    vectorIndex?: string;
}
export interface IFolderCreateReqArgs {
    name: string;
    parentId?: number | string | thrift.Int64;
    tosKey?: string;
    vectorIndex?: string;
}
export const FolderCreateReqCodec: thrift.IStructCodec<IFolderCreateReqArgs, IFolderCreateReq> = {
    encode(args: IFolderCreateReqArgs, output: thrift.TProtocol): void {
        const obj: any = {
            name: args.name,
            parentId: (typeof args.parentId === "number" ? new thrift.Int64(args.parentId) : typeof args.parentId === "string" ? thrift.Int64.fromDecimalString(args.parentId) : args.parentId),
            tosKey: args.tosKey,
            vectorIndex: args.vectorIndex
        };
        output.writeStructBegin("FolderCreateReq");
        if (obj.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 1);
            output.writeString(obj.name);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[name] is unset!");
        }
        if (obj.parentId != null) {
            output.writeFieldBegin("parentId", thrift.TType.I64, 2);
            output.writeI64((typeof obj.parentId === "number" ? new thrift.Int64(obj.parentId) : typeof obj.parentId === "string" ? thrift.Int64.fromDecimalString(obj.parentId) : obj.parentId));
            output.writeFieldEnd();
        }
        if (obj.tosKey != null) {
            output.writeFieldBegin("tosKey", thrift.TType.STRING, 3);
            output.writeString(obj.tosKey);
            output.writeFieldEnd();
        }
        if (obj.vectorIndex != null) {
            output.writeFieldBegin("vectorIndex", thrift.TType.STRING, 4);
            output.writeString(obj.vectorIndex);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IFolderCreateReq {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.name = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I64) {
                        const value_2: thrift.Int64 = input.readI64();
                        _args.parentId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.tosKey = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.vectorIndex = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.name !== undefined) {
            return {
                name: _args.name,
                parentId: _args.parentId,
                tosKey: _args.tosKey,
                vectorIndex: _args.vectorIndex
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read FolderCreateReq from input");
        }
    }
};
export class FolderCreateReq extends thrift.StructLike implements IFolderCreateReq {
    public name: string;
    public parentId?: thrift.Int64;
    public tosKey?: string;
    public vectorIndex?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IFolderCreateReqArgs) {
        super();
        if (args.name != null) {
            const value_5: string = args.name;
            this.name = value_5;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[name] is unset!");
        }
        if (args.parentId != null) {
            const value_6: thrift.Int64 = (typeof args.parentId === "number" ? new thrift.Int64(args.parentId) : typeof args.parentId === "string" ? thrift.Int64.fromDecimalString(args.parentId) : args.parentId);
            this.parentId = value_6;
        }
        if (args.tosKey != null) {
            const value_7: string = args.tosKey;
            this.tosKey = value_7;
        }
        if (args.vectorIndex != null) {
            const value_8: string = args.vectorIndex;
            this.vectorIndex = value_8;
        }
    }
    public static read(input: thrift.TProtocol): FolderCreateReq {
        return new FolderCreateReq(FolderCreateReqCodec.decode(input));
    }
    public static write(args: IFolderCreateReqArgs, output: thrift.TProtocol): void {
        return FolderCreateReqCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return FolderCreateReqCodec.encode(this, output);
    }
}
