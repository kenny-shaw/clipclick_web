/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Folder from "./Folder";
export interface IFolderDetailResp {
    folder: Folder.IFolder;
}
export interface IFolderDetailRespArgs {
    folder: Folder.IFolderArgs;
}
export const FolderDetailRespCodec: thrift.IStructCodec<IFolderDetailRespArgs, IFolderDetailResp> = {
    encode(args: IFolderDetailRespArgs, output: thrift.TProtocol): void {
        const obj: any = {
            folder: args.folder
        };
        output.writeStructBegin("FolderDetailResp");
        if (obj.folder != null) {
            output.writeFieldBegin("folder", thrift.TType.STRUCT, 1);
            Folder.FolderCodec.encode(obj.folder, output);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[folder] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IFolderDetailResp {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_1: Folder.IFolder = Folder.FolderCodec.decode(input);
                        _args.folder = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.folder !== undefined) {
            return {
                folder: _args.folder
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read FolderDetailResp from input");
        }
    }
};
export class FolderDetailResp extends thrift.StructLike implements IFolderDetailResp {
    public folder: Folder.IFolder;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IFolderDetailRespArgs) {
        super();
        if (args.folder != null) {
            const value_2: Folder.IFolder = new Folder.Folder(args.folder);
            this.folder = value_2;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[folder] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): FolderDetailResp {
        return new FolderDetailResp(FolderDetailRespCodec.decode(input));
    }
    public static write(args: IFolderDetailRespArgs, output: thrift.TProtocol): void {
        return FolderDetailRespCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return FolderDetailRespCodec.encode(this, output);
    }
}
