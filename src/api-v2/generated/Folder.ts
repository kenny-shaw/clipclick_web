/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IFolder {
    id: thrift.Int64;
    name: string;
    tosKey: string;
    parentId?: thrift.Int64;
    vectorIndex?: string;
    ownerId: string;
    isPublic: number;
    createdAt: string;
    updatedAt: string;
}
export interface IFolderArgs {
    id: number | string | thrift.Int64;
    name: string;
    tosKey: string;
    parentId?: number | string | thrift.Int64;
    vectorIndex?: string;
    ownerId: string;
    isPublic: number;
    createdAt: string;
    updatedAt: string;
}
export const FolderCodec: thrift.IStructCodec<IFolderArgs, IFolder> = {
    encode(args: IFolderArgs, output: thrift.TProtocol): void {
        const obj: any = {
            id: (typeof args.id === "number" ? new thrift.Int64(args.id) : typeof args.id === "string" ? thrift.Int64.fromDecimalString(args.id) : args.id),
            name: args.name,
            tosKey: args.tosKey,
            parentId: (typeof args.parentId === "number" ? new thrift.Int64(args.parentId) : typeof args.parentId === "string" ? thrift.Int64.fromDecimalString(args.parentId) : args.parentId),
            vectorIndex: args.vectorIndex,
            ownerId: args.ownerId,
            isPublic: args.isPublic,
            createdAt: args.createdAt,
            updatedAt: args.updatedAt
        };
        output.writeStructBegin("Folder");
        if (obj.id != null) {
            output.writeFieldBegin("id", thrift.TType.I64, 1);
            output.writeI64((typeof obj.id === "number" ? new thrift.Int64(obj.id) : typeof obj.id === "string" ? thrift.Int64.fromDecimalString(obj.id) : obj.id));
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (obj.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 2);
            output.writeString(obj.name);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[name] is unset!");
        }
        if (obj.tosKey != null) {
            output.writeFieldBegin("tosKey", thrift.TType.STRING, 3);
            output.writeString(obj.tosKey);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[tosKey] is unset!");
        }
        if (obj.parentId != null) {
            output.writeFieldBegin("parentId", thrift.TType.I64, 4);
            output.writeI64((typeof obj.parentId === "number" ? new thrift.Int64(obj.parentId) : typeof obj.parentId === "string" ? thrift.Int64.fromDecimalString(obj.parentId) : obj.parentId));
            output.writeFieldEnd();
        }
        if (obj.vectorIndex != null) {
            output.writeFieldBegin("vectorIndex", thrift.TType.STRING, 5);
            output.writeString(obj.vectorIndex);
            output.writeFieldEnd();
        }
        if (obj.ownerId != null) {
            output.writeFieldBegin("ownerId", thrift.TType.STRING, 6);
            output.writeString(obj.ownerId);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[ownerId] is unset!");
        }
        if (obj.isPublic != null) {
            output.writeFieldBegin("isPublic", thrift.TType.I32, 7);
            output.writeI32(obj.isPublic);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[isPublic] is unset!");
        }
        if (obj.createdAt != null) {
            output.writeFieldBegin("createdAt", thrift.TType.STRING, 8);
            output.writeString(obj.createdAt);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[createdAt] is unset!");
        }
        if (obj.updatedAt != null) {
            output.writeFieldBegin("updatedAt", thrift.TType.STRING, 9);
            output.writeString(obj.updatedAt);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[updatedAt] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IFolder {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I64) {
                        const value_1: thrift.Int64 = input.readI64();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.name = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.tosKey = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.I64) {
                        const value_4: thrift.Int64 = input.readI64();
                        _args.parentId = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.vectorIndex = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.ownerId = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.I32) {
                        const value_7: number = input.readI32();
                        _args.isPublic = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.createdAt = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.updatedAt = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.id !== undefined && _args.name !== undefined && _args.tosKey !== undefined && _args.ownerId !== undefined && _args.isPublic !== undefined && _args.createdAt !== undefined && _args.updatedAt !== undefined) {
            return {
                id: _args.id,
                name: _args.name,
                tosKey: _args.tosKey,
                parentId: _args.parentId,
                vectorIndex: _args.vectorIndex,
                ownerId: _args.ownerId,
                isPublic: _args.isPublic,
                createdAt: _args.createdAt,
                updatedAt: _args.updatedAt
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Folder from input");
        }
    }
};
export class Folder extends thrift.StructLike implements IFolder {
    public id: thrift.Int64;
    public name: string;
    public tosKey: string;
    public parentId?: thrift.Int64;
    public vectorIndex?: string;
    public ownerId: string;
    public isPublic: number;
    public createdAt: string;
    public updatedAt: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IFolderArgs) {
        super();
        if (args.id != null) {
            const value_10: thrift.Int64 = (typeof args.id === "number" ? new thrift.Int64(args.id) : typeof args.id === "string" ? thrift.Int64.fromDecimalString(args.id) : args.id);
            this.id = value_10;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (args.name != null) {
            const value_11: string = args.name;
            this.name = value_11;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[name] is unset!");
        }
        if (args.tosKey != null) {
            const value_12: string = args.tosKey;
            this.tosKey = value_12;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[tosKey] is unset!");
        }
        if (args.parentId != null) {
            const value_13: thrift.Int64 = (typeof args.parentId === "number" ? new thrift.Int64(args.parentId) : typeof args.parentId === "string" ? thrift.Int64.fromDecimalString(args.parentId) : args.parentId);
            this.parentId = value_13;
        }
        if (args.vectorIndex != null) {
            const value_14: string = args.vectorIndex;
            this.vectorIndex = value_14;
        }
        if (args.ownerId != null) {
            const value_15: string = args.ownerId;
            this.ownerId = value_15;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[ownerId] is unset!");
        }
        if (args.isPublic != null) {
            const value_16: number = args.isPublic;
            this.isPublic = value_16;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[isPublic] is unset!");
        }
        if (args.createdAt != null) {
            const value_17: string = args.createdAt;
            this.createdAt = value_17;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[createdAt] is unset!");
        }
        if (args.updatedAt != null) {
            const value_18: string = args.updatedAt;
            this.updatedAt = value_18;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[updatedAt] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): Folder {
        return new Folder(FolderCodec.decode(input));
    }
    public static write(args: IFolderArgs, output: thrift.TProtocol): void {
        return FolderCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return FolderCodec.encode(this, output);
    }
}
