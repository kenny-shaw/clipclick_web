/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IFolderUpdateResp {
    success: boolean;
}
export interface IFolderUpdateRespArgs {
    success: boolean;
}
export const FolderUpdateRespCodec: thrift.IStructCodec<IFolderUpdateRespArgs, IFolderUpdateResp> = {
    encode(args: IFolderUpdateRespArgs, output: thrift.TProtocol): void {
        const obj: any = {
            success: args.success
        };
        output.writeStructBegin("FolderUpdateResp");
        if (obj.success != null) {
            output.writeFieldBegin("success", thrift.TType.BOOL, 1);
            output.writeBool(obj.success);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[success] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IFolderUpdateResp {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_1: boolean = input.readBool();
                        _args.success = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.success !== undefined) {
            return {
                success: _args.success
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read FolderUpdateResp from input");
        }
    }
};
export class FolderUpdateResp extends thrift.StructLike implements IFolderUpdateResp {
    public success: boolean;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IFolderUpdateRespArgs) {
        super();
        if (args.success != null) {
            const value_2: boolean = args.success;
            this.success = value_2;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[success] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): FolderUpdateResp {
        return new FolderUpdateResp(FolderUpdateRespCodec.decode(input));
    }
    public static write(args: IFolderUpdateRespArgs, output: thrift.TProtocol): void {
        return FolderUpdateRespCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return FolderUpdateRespCodec.encode(this, output);
    }
}
