/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IUserRegisterResp {
    userId: thrift.Int64;
    token: string;
    message: string;
}
export interface IUserRegisterRespArgs {
    userId: number | string | thrift.Int64;
    token: string;
    message: string;
}
export const UserRegisterRespCodec: thrift.IStructCodec<IUserRegisterRespArgs, IUserRegisterResp> = {
    encode(args: IUserRegisterRespArgs, output: thrift.TProtocol): void {
        const obj: any = {
            userId: (typeof args.userId === "number" ? new thrift.Int64(args.userId) : typeof args.userId === "string" ? thrift.Int64.fromDecimalString(args.userId) : args.userId),
            token: args.token,
            message: args.message
        };
        output.writeStructBegin("UserRegisterResp");
        if (obj.userId != null) {
            output.writeFieldBegin("userId", thrift.TType.I64, 1);
            output.writeI64((typeof obj.userId === "number" ? new thrift.Int64(obj.userId) : typeof obj.userId === "string" ? thrift.Int64.fromDecimalString(obj.userId) : obj.userId));
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[userId] is unset!");
        }
        if (obj.token != null) {
            output.writeFieldBegin("token", thrift.TType.STRING, 2);
            output.writeString(obj.token);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (obj.message != null) {
            output.writeFieldBegin("message", thrift.TType.STRING, 3);
            output.writeString(obj.message);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[message] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IUserRegisterResp {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I64) {
                        const value_1: thrift.Int64 = input.readI64();
                        _args.userId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.token = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.message = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.userId !== undefined && _args.token !== undefined && _args.message !== undefined) {
            return {
                userId: _args.userId,
                token: _args.token,
                message: _args.message
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read UserRegisterResp from input");
        }
    }
};
export class UserRegisterResp extends thrift.StructLike implements IUserRegisterResp {
    public userId: thrift.Int64;
    public token: string;
    public message: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IUserRegisterRespArgs) {
        super();
        if (args.userId != null) {
            const value_4: thrift.Int64 = (typeof args.userId === "number" ? new thrift.Int64(args.userId) : typeof args.userId === "string" ? thrift.Int64.fromDecimalString(args.userId) : args.userId);
            this.userId = value_4;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[userId] is unset!");
        }
        if (args.token != null) {
            const value_5: string = args.token;
            this.token = value_5;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[token] is unset!");
        }
        if (args.message != null) {
            const value_6: string = args.message;
            this.message = value_6;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[message] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): UserRegisterResp {
        return new UserRegisterResp(UserRegisterRespCodec.decode(input));
    }
    public static write(args: IUserRegisterRespArgs, output: thrift.TProtocol): void {
        return UserRegisterRespCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return UserRegisterRespCodec.encode(this, output);
    }
}
