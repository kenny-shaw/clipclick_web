/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IProduct {
    id: thrift.Int64;
    name: string;
    mainFolderId: thrift.Int64;
    captionFolderId: thrift.Int64;
    prefixFolderId: thrift.Int64;
    picFolderId: thrift.Int64;
    createdAt: string;
    updatedAt: string;
}
export interface IProductArgs {
    id: number | string | thrift.Int64;
    name: string;
    mainFolderId: number | string | thrift.Int64;
    captionFolderId: number | string | thrift.Int64;
    prefixFolderId: number | string | thrift.Int64;
    picFolderId: number | string | thrift.Int64;
    createdAt: string;
    updatedAt: string;
}
export const ProductCodec: thrift.IStructCodec<IProductArgs, IProduct> = {
    encode(args: IProductArgs, output: thrift.TProtocol): void {
        const obj: any = {
            id: (typeof args.id === "number" ? new thrift.Int64(args.id) : typeof args.id === "string" ? thrift.Int64.fromDecimalString(args.id) : args.id),
            name: args.name,
            mainFolderId: (typeof args.mainFolderId === "number" ? new thrift.Int64(args.mainFolderId) : typeof args.mainFolderId === "string" ? thrift.Int64.fromDecimalString(args.mainFolderId) : args.mainFolderId),
            captionFolderId: (typeof args.captionFolderId === "number" ? new thrift.Int64(args.captionFolderId) : typeof args.captionFolderId === "string" ? thrift.Int64.fromDecimalString(args.captionFolderId) : args.captionFolderId),
            prefixFolderId: (typeof args.prefixFolderId === "number" ? new thrift.Int64(args.prefixFolderId) : typeof args.prefixFolderId === "string" ? thrift.Int64.fromDecimalString(args.prefixFolderId) : args.prefixFolderId),
            picFolderId: (typeof args.picFolderId === "number" ? new thrift.Int64(args.picFolderId) : typeof args.picFolderId === "string" ? thrift.Int64.fromDecimalString(args.picFolderId) : args.picFolderId),
            createdAt: args.createdAt,
            updatedAt: args.updatedAt
        };
        output.writeStructBegin("Product");
        if (obj.id != null) {
            output.writeFieldBegin("id", thrift.TType.I64, 1);
            output.writeI64((typeof obj.id === "number" ? new thrift.Int64(obj.id) : typeof obj.id === "string" ? thrift.Int64.fromDecimalString(obj.id) : obj.id));
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (obj.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 2);
            output.writeString(obj.name);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[name] is unset!");
        }
        if (obj.mainFolderId != null) {
            output.writeFieldBegin("mainFolderId", thrift.TType.I64, 3);
            output.writeI64((typeof obj.mainFolderId === "number" ? new thrift.Int64(obj.mainFolderId) : typeof obj.mainFolderId === "string" ? thrift.Int64.fromDecimalString(obj.mainFolderId) : obj.mainFolderId));
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[mainFolderId] is unset!");
        }
        if (obj.captionFolderId != null) {
            output.writeFieldBegin("captionFolderId", thrift.TType.I64, 4);
            output.writeI64((typeof obj.captionFolderId === "number" ? new thrift.Int64(obj.captionFolderId) : typeof obj.captionFolderId === "string" ? thrift.Int64.fromDecimalString(obj.captionFolderId) : obj.captionFolderId));
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[captionFolderId] is unset!");
        }
        if (obj.prefixFolderId != null) {
            output.writeFieldBegin("prefixFolderId", thrift.TType.I64, 5);
            output.writeI64((typeof obj.prefixFolderId === "number" ? new thrift.Int64(obj.prefixFolderId) : typeof obj.prefixFolderId === "string" ? thrift.Int64.fromDecimalString(obj.prefixFolderId) : obj.prefixFolderId));
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[prefixFolderId] is unset!");
        }
        if (obj.picFolderId != null) {
            output.writeFieldBegin("picFolderId", thrift.TType.I64, 6);
            output.writeI64((typeof obj.picFolderId === "number" ? new thrift.Int64(obj.picFolderId) : typeof obj.picFolderId === "string" ? thrift.Int64.fromDecimalString(obj.picFolderId) : obj.picFolderId));
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[picFolderId] is unset!");
        }
        if (obj.createdAt != null) {
            output.writeFieldBegin("createdAt", thrift.TType.STRING, 7);
            output.writeString(obj.createdAt);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[createdAt] is unset!");
        }
        if (obj.updatedAt != null) {
            output.writeFieldBegin("updatedAt", thrift.TType.STRING, 8);
            output.writeString(obj.updatedAt);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[updatedAt] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IProduct {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I64) {
                        const value_1: thrift.Int64 = input.readI64();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.name = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I64) {
                        const value_3: thrift.Int64 = input.readI64();
                        _args.mainFolderId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.I64) {
                        const value_4: thrift.Int64 = input.readI64();
                        _args.captionFolderId = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.I64) {
                        const value_5: thrift.Int64 = input.readI64();
                        _args.prefixFolderId = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.I64) {
                        const value_6: thrift.Int64 = input.readI64();
                        _args.picFolderId = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRING) {
                        const value_7: string = input.readString();
                        _args.createdAt = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.updatedAt = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.id !== undefined && _args.name !== undefined && _args.mainFolderId !== undefined && _args.captionFolderId !== undefined && _args.prefixFolderId !== undefined && _args.picFolderId !== undefined && _args.createdAt !== undefined && _args.updatedAt !== undefined) {
            return {
                id: _args.id,
                name: _args.name,
                mainFolderId: _args.mainFolderId,
                captionFolderId: _args.captionFolderId,
                prefixFolderId: _args.prefixFolderId,
                picFolderId: _args.picFolderId,
                createdAt: _args.createdAt,
                updatedAt: _args.updatedAt
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Product from input");
        }
    }
};
export class Product extends thrift.StructLike implements IProduct {
    public id: thrift.Int64;
    public name: string;
    public mainFolderId: thrift.Int64;
    public captionFolderId: thrift.Int64;
    public prefixFolderId: thrift.Int64;
    public picFolderId: thrift.Int64;
    public createdAt: string;
    public updatedAt: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IProductArgs) {
        super();
        if (args.id != null) {
            const value_9: thrift.Int64 = (typeof args.id === "number" ? new thrift.Int64(args.id) : typeof args.id === "string" ? thrift.Int64.fromDecimalString(args.id) : args.id);
            this.id = value_9;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (args.name != null) {
            const value_10: string = args.name;
            this.name = value_10;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[name] is unset!");
        }
        if (args.mainFolderId != null) {
            const value_11: thrift.Int64 = (typeof args.mainFolderId === "number" ? new thrift.Int64(args.mainFolderId) : typeof args.mainFolderId === "string" ? thrift.Int64.fromDecimalString(args.mainFolderId) : args.mainFolderId);
            this.mainFolderId = value_11;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[mainFolderId] is unset!");
        }
        if (args.captionFolderId != null) {
            const value_12: thrift.Int64 = (typeof args.captionFolderId === "number" ? new thrift.Int64(args.captionFolderId) : typeof args.captionFolderId === "string" ? thrift.Int64.fromDecimalString(args.captionFolderId) : args.captionFolderId);
            this.captionFolderId = value_12;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[captionFolderId] is unset!");
        }
        if (args.prefixFolderId != null) {
            const value_13: thrift.Int64 = (typeof args.prefixFolderId === "number" ? new thrift.Int64(args.prefixFolderId) : typeof args.prefixFolderId === "string" ? thrift.Int64.fromDecimalString(args.prefixFolderId) : args.prefixFolderId);
            this.prefixFolderId = value_13;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[prefixFolderId] is unset!");
        }
        if (args.picFolderId != null) {
            const value_14: thrift.Int64 = (typeof args.picFolderId === "number" ? new thrift.Int64(args.picFolderId) : typeof args.picFolderId === "string" ? thrift.Int64.fromDecimalString(args.picFolderId) : args.picFolderId);
            this.picFolderId = value_14;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[picFolderId] is unset!");
        }
        if (args.createdAt != null) {
            const value_15: string = args.createdAt;
            this.createdAt = value_15;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[createdAt] is unset!");
        }
        if (args.updatedAt != null) {
            const value_16: string = args.updatedAt;
            this.updatedAt = value_16;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[updatedAt] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): Product {
        return new Product(ProductCodec.decode(input));
    }
    public static write(args: IProductArgs, output: thrift.TProtocol): void {
        return ProductCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ProductCodec.encode(this, output);
    }
}
